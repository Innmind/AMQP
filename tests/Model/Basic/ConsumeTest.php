<?php
declare(strict_types = 1);

namespace Tests\Innmind\AMQP\Model\Basic;

use Innmind\AMQP\{
    Model\Basic\Consume,
    Exception\AutoGeneratedConsumerTagRequireServerResponse,
};
use Innmind\Immutable\Map;
use Innmind\BlackBox\PHPUnit\Framework\TestCase;
use PHPUnit\Framework\Attributes\Group;

class ConsumeTest extends TestCase
{
    #[Group('ci')]
    #[Group('local')]
    public function testInterface()
    {
        $command = Consume::of('queue');

        $this->assertSame('queue', $command->queue());
        $this->assertInstanceOf(Map::class, $command->arguments());
        $this->assertCount(0, $command->arguments());
        $this->assertNull($command->consumerTag()->match(
            static fn($tag) => $tag,
            static fn() => null,
        ));
        $this->assertTrue($command->isLocal());
        $this->assertFalse($command->shouldAutoAcknowledge());
        $this->assertFalse($command->isExclusive());
        $this->assertTrue($command->shouldWait());
    }

    #[Group('ci')]
    #[Group('local')]
    public function testWithConsumerTag()
    {
        $command = Consume::of('queue');
        $command2 = $command->withConsumerTag('foo');

        $this->assertInstanceOf(Consume::class, $command2);
        $this->assertSame('foo', $command2->consumerTag()->match(
            static fn($tag) => $tag,
            static fn() => null,
        ));

        $command3 = $command2->withAutoGeneratedConsumerTag();

        $this->assertInstanceOf(Consume::class, $command3);
        $this->assertNull($command3->consumerTag()->match(
            static fn($tag) => $tag,
            static fn() => null,
        ));
    }

    #[Group('ci')]
    #[Group('local')]
    public function testNoLocal()
    {
        $command = Consume::of('queue');
        $command2 = $command->noLocal();

        $this->assertInstanceOf(Consume::class, $command2);
        $this->assertNotSame($command2, $command);
        $this->assertTrue($command->isLocal());
        $this->assertFalse($command2->isLocal());

        $command3 = $command2->local();

        $this->assertInstanceOf(Consume::class, $command3);
        $this->assertNotSame($command3, $command2);
        $this->assertFalse($command2->isLocal());
        $this->assertTrue($command3->isLocal());
    }

    #[Group('ci')]
    #[Group('local')]
    public function testAutoAcknowledge()
    {
        $command = Consume::of('queue');
        $command2 = $command->autoAcknowledge();

        $this->assertInstanceOf(Consume::class, $command2);
        $this->assertNotSame($command2, $command);
        $this->assertFalse($command->shouldAutoAcknowledge());
        $this->assertTrue($command2->shouldAutoAcknowledge());

        $command3 = $command2->manualAcknowledge();

        $this->assertInstanceOf(Consume::class, $command3);
        $this->assertNotSame($command2, $command3);
        $this->assertTrue($command2->shouldAutoAcknowledge());
        $this->assertFalse($command3->shouldAutoAcknowledge());
    }

    #[Group('ci')]
    #[Group('local')]
    public function testExclusive()
    {
        $command = Consume::of('queue');
        $command2 = $command->exclusive();

        $this->assertInstanceOf(Consume::class, $command2);
        $this->assertNotSame($command2, $command);
        $this->assertFalse($command->isExclusive());
        $this->assertTrue($command2->isExclusive());

        $command3 = $command2->notExclusive();

        $this->assertInstanceOf(Consume::class, $command3);
        $this->assertNotSame($command2, $command3);
        $this->assertTrue($command2->isExclusive());
        $this->assertFalse($command3->isExclusive());
    }

    #[Group('ci')]
    #[Group('local')]
    public function testDontWait()
    {
        $command = Consume::of('queue')->withConsumerTag('foo');
        $command2 = $command->dontWait();

        $this->assertInstanceOf(Consume::class, $command2);
        $this->assertNotSame($command2, $command);
        $this->assertTrue($command->shouldWait());
        $this->assertFalse($command2->shouldWait());

        $command3 = $command2->wait();

        $this->assertInstanceOf(Consume::class, $command3);
        $this->assertNotSame($command2, $command3);
        $this->assertFalse($command2->shouldWait());
        $this->assertTrue($command3->shouldWait());
    }

    #[Group('ci')]
    #[Group('local')]
    public function testThrowWhenNotWaitingResponseWithAutoGeneratedConsumerTag()
    {
        $this->expectException(AutoGeneratedConsumerTagRequireServerResponse::class);

        Consume::of('queue')->dontWait();
    }
}
