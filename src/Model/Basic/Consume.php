<?php
declare(strict_types = 1);

namespace Innmind\AMQP\Model\Basic;

use Innmind\AMQP\Exception\AutoGeneratedConsumerTagRequireServerResponse;
use Innmind\Immutable\{
    Map,
    Maybe,
};

/**
 * @psalm-immutable
 */
final class Consume
{
    private string $queue;
    /** @var Maybe<string> */
    private Maybe $consumerTag;
    private bool $local = true;
    private bool $ack = true;
    private bool $exclusive = false;
    private bool $wait = true;
    /** @var Map<string, mixed> */
    private Map $arguments;

    public function __construct(string $queue)
    {
        $this->queue = $queue;
        /** @var Maybe<string> */
        $this->consumerTag = Maybe::nothing();
        /** @var Map<string, mixed> */
        $this->arguments = Map::of();
    }

    public function withConsumerTag(string $tag): self
    {
        $self = clone $this;
        $self->consumerTag = Maybe::just($tag);

        return $self;
    }

    /**
     * Let the server define the consumer tag
     */
    public function withAutoGeneratedConsumerTag(): self
    {
        $self = clone $this;
        /** @var Maybe<string> */
        $self->consumerTag = Maybe::nothing();

        return $self;
    }

    /**
     * Means the server will not deliver messages to the consumer
     */
    public function noLocal(): self
    {
        $self = clone $this;
        $self->local = false;

        return $self;
    }

    public function local(): self
    {
        $self = clone $this;
        $self->local = true;

        return $self;
    }

    public function manualAcknowledge(): self
    {
        $self = clone $this;
        $self->ack = true;

        return $self;
    }

    public function autoAcknowledge(): self
    {
        $self = clone $this;
        $self->ack = false;

        return $self;
    }

    public function exclusive(): self
    {
        $self = clone $this;
        $self->exclusive = true;

        return $self;
    }

    public function notExclusive(): self
    {
        $self = clone $this;
        $self->exclusive = false;

        return $self;
    }

    public function dontWait(): self
    {
        $_ = $this->consumerTag->match(
            static fn() => null,
            static fn() => throw new AutoGeneratedConsumerTagRequireServerResponse,
        );

        $self = clone $this;
        $self->wait = false;

        return $self;
    }

    public function wait(): self
    {
        $self = clone $this;
        $self->wait = true;

        return $self;
    }

    /**
     * @param mixed $value
     */
    public function withArgument(string $key, $value): self
    {
        $self = clone $this;
        $self->arguments = ($self->arguments)($key, $value);

        return $self;
    }

    public function queue(): string
    {
        return $this->queue;
    }

    /**
     * @return Maybe<string>
     */
    public function consumerTag(): Maybe
    {
        return $this->consumerTag;
    }

    public function isLocal(): bool
    {
        return $this->local;
    }

    public function shouldAutoAcknowledge(): bool
    {
        return !$this->ack;
    }

    public function isExclusive(): bool
    {
        return $this->exclusive;
    }

    public function shouldWait(): bool
    {
        return $this->wait;
    }

    /**
     * @return Map<string, mixed>
     */
    public function arguments(): Map
    {
        return $this->arguments;
    }
}
